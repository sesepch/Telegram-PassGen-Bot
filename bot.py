from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import aiohttp
import asyncio
import config
import random
import string

LM_API_URL = "http://localhost:1234/v1/completions"  # Adjust port if needed
MODEL_NAME = "gemma-3-1b-it-qat"
# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
user_messages = {}
# Create a router for handlers
router = Router()
dp.include_router(router)

# Function to generate a password
def format_prompt(user_message: str) -> str:
    return f"""You are a friendly and helpful assistant.
User: {user_message}
Assistant:"""

async def query_lm_studio(prompt: str) -> str:
    payload = {
        "model": MODEL_NAME,
        "prompt": prompt,
        "temperature": 0.7,
        "top_p": 0.95,
        "max_tokens": 200,
        "stop": ["User:", "Assistant:"]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(LM_API_URL, json=payload) as response:
            data = await response.json()
            return data.get("choices", [{}])[0].get("text", "").strip()
def generate_password(length=12):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

# Define keyboards

main_admin = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–°–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å')],
        [KeyboardButton(text='/id')],
        [KeyboardButton(text='–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')]
    ],
    resize_keyboard=True
)

# Start command handler
@router.message(Command('start'))
async def start(message: types.Message):
        await message.answer_sticker('CAACAgIAAxkBAAEMYIZnqIWwZ0Bi-ofAswlID2sBP22FaQAClyUAAncmKEpUlw3HOgpDKTYE')
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏', reply_markup=main_admin)

# ID command handler
@router.message(Command('id'))
async def getid(message: types.Message):
    await message.answer(f'{message.from_user.id}')

# Generate password handler
@router.message(lambda message: message.text == '–°–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å')
async def generate_pass(message: types.Message):
    await message.answer(generate_password())

@router.message(lambda message: message.text == '–î–æ–º–æ–π')
async def home(message: types.Message):
    await message.answer('–¢—ã –¥–æ–º–∞', reply_markup=main_admin)

@router.message(lambda message: message.text == '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
async def app(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=types.WebAppInfo(url="https://sesepch.github.io/telegram-test-app/")
            )], [KeyboardButton(text='–î–æ–º–æ–π')]
        ],
        resize_keyboard=True
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=keyboard)
@router.message()
async def on_user_message(message: types.Message):
    user_messages[message.chat.id] = message.text.strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß† –°–ø—Ä–æ—Å–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å", callback_data="ask_ai")]
    ])

    await message.answer("–•–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É:", reply_markup=keyboard)


# Handle button press
@dp.callback_query(F.data == "ask_ai")
async def on_ask_ai(callback: CallbackQuery):
    user_input = user_messages.get(callback.message.chat.id)

    if not user_input:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return

    await callback.message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")

    try:
        prompt = format_prompt(user_input)
        response = await query_lm_studio(prompt)
        await callback.message.answer(response or "ü§∑ –û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        await callback.message.answer(f"‚ùå Error: {str(e)}")




# Main function to start polling
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())